service: resize

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  timeout: 30
  region: eu-west-1
  vpc:
    securityGroupIds:
      - ${ssm:/API/SecurityGroup}
    subnetIds:
      - ${ssm:/API/Subnet}
  environment:
    stage: ${self:provider.stage}
    BUCKET_NAME: ${ssm:/API/ProfilePictures/BucketName}
    BUCKET_REGION: ${ssm:/API/ProfilePictures/BucketRegion}
    AWS_KEY_ID: ${ssm:/resize/AwsKeyId}
    AWS_KEY_SECRET: ${ssm:/resize/AwsKeySecret~true}
    DB_PROXY_HOST: ${ssm:/DB/Proxy/Host}
    DB_HOST: ${ssm:/DB/Host}
    DB_PORT: ${ssm:/DB/Port}
    DB_NAME: ${ssm:/DB/Name}
    DB_USER: ${ssm:/resize/DB/User}
    DB_PASSWORD: ${ssm:/resize/DB/Password~true}
    IMG_SECRET: ${ssm:/resize/secret~true}

functions:
  resize:
    handler: src/handler.resize
    events:
      - s3:
          bucket: ${ssm:/API/ProfilePictures/BucketName}
          event: s3:ObjectCreated:*
          existing: true
  transform:
    handler: src/handler.transform
    events:
      - http:
          method: POST
          path: /process
      - sns:
          arn: ${ssm:/resize/SNS/arn}
          maximumRetryAttempts: 2

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    port: 9000
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
